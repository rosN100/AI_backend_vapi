console.log('Dashboard.js file loaded successfully!');

/**
 * Dashboard Logic for Soraaya AI - Real Estate Dashboard
 * Handles data fetching, chart rendering, and real-time updates
 */

class DashboardManager {
  constructor() {
    this.charts = {};
    this.data = {
      totalCalls: 0,
      callsAnswered: 0,
      leadsQualified: 0,
      humanInterventions: 0,
      lastUpdated: null
    };
    this.refreshInterval = 30000; // 30 seconds
    this.init();
  }

  /**
   * Initialize the dashboard
   */
  async init() {
    try {
      await this.loadInitialData();
      this.updateTimestamp();
      this.startAutoRefresh();
      console.log('Dashboard initialized successfully');
    } catch (error) {
      console.error('Failed to initialize dashboard:', error);
    }
  }

  /**
   * Load initial data from the backend
   */
  async loadInitialData() {
    try {
      // Fetch data from debug endpoints
      const [callsData, supabaseData] = await Promise.all([
        this.fetchCallsData(),
        this.fetchSupabaseData()
      ]);

      this.processCallsData(callsData);
    
    // Handle the actual structure from /debug-supabase endpoint
    const calls = supabaseData.recentCalls || supabaseData.calls || [];
    if (Array.isArray(calls)) {
      this.processSupabaseData(calls);
    } else {
      console.warn('Invalid Supabase data structure:', supabaseData);
    }
    
    this.updateSummaryCards();
    
    console.log('About to initialize charts...');
    // Initialize charts after data is loaded
    this.initializeCharts();
    console.log('Charts initialization completed');
    } catch (error) {
      console.error('Error loading initial data:', error);
      // Use mock data if API fails
      this.loadMockData();
      this.updateSummaryCards();
      console.log('About to initialize charts (fallback)...');
      this.initializeCharts();
      console.log('Charts initialization completed (fallback)');
    }
  }

  /**
   * Fetch calls data from backend
   */
  async fetchCallsData() {
    try {
      const response = await fetch('/debug-calls');
      if (!response.ok) throw new Error('Failed to fetch calls data');
      return await response.json();
    } catch (error) {
      console.warn('Using mock calls data:', error.message);
      return {};
    }
  }

  /**
   * Fetch Supabase data from backend
   */
  async fetchSupabaseData() {
    try {
      const response = await fetch('/debug-supabase');
      if (!response.ok) throw new Error('Failed to fetch Supabase data');
      return await response.json();
    } catch (error) {
      console.warn('Using mock Supabase data:', error.message);
      return { calls: [] };
    }
  }

  /**
   * Process calls data and update metrics
   */
  processCallsData(callsData) {
    // Process in-memory calls data
    const callsArray = Object.values(callsData);
    this.data.totalCalls = callsArray.length;
    console.log(`Processed ${this.data.totalCalls} calls from memory`);
  }

  /**
   * Process Supabase data and update metrics
   */
  processSupabaseData(calls) {
    if (!calls || calls.length === 0) {
      console.log('No Supabase data to process');
      return;
    }
    
    // Store calls data for other calculations
    this.supabaseCalls = calls;
    
    // Calculate metrics from Supabase data
    this.data.callsAnswered = calls.filter(call => 
      call.status === 'completed'
    ).length;

    this.data.leadsQualified = calls.filter(call => 
      call.lead_status === 'qualified'
    ).length;

    this.data.humanInterventions = calls.filter(call => 
      call.ended_reason === 'human-input-needed' || 
      call.lead_status === 'needs_review'
    ).length;

    // Set total calls from Supabase data
    this.data.totalCalls = calls.length;
    
    console.log(`Processed ${calls.length} calls from Supabase`);
  }

  /**
   * Calculate average call duration by day of week from real data
   */
  calculateDurationByDay() {
    if (!this.supabaseCalls || this.supabaseCalls.length === 0) {
      console.log('No Supabase calls data available for duration calculation');
      // Fallback to mock data if no real data available
      return [20, 18, 22, 17, 19, 15, 16];
    }

    console.log('Calculating duration from', this.supabaseCalls.length, 'calls');
    const dayData = [[], [], [], [], [], [], []]; // Mon-Sun
    let processedCalls = 0;
    
    this.supabaseCalls.forEach(call => {
      // Convert duration_seconds to number if it's a string
      const durationSeconds = parseInt(call.duration_seconds) || 0;
      
      if (durationSeconds > 0 && call.created_at) {
        const date = new Date(call.created_at);
        const dayOfWeek = (date.getDay() + 6) % 7; // Convert Sunday=0 to Monday=0
        const durationMinutes = Math.round(durationSeconds / 60);
        dayData[dayOfWeek].push(durationMinutes);
        processedCalls++;
        console.log(`Call ${call.call_id}: ${durationSeconds}s (${durationMinutes}min) on day ${dayOfWeek}`);
      }
    });

    console.log(`Processed ${processedCalls} calls with duration data`);

    // Calculate average for each day, use overall average if no data for specific day
    const result = dayData.map((dayDurations, dayIndex) => {
      if (dayDurations.length === 0) {
        // If no data for this day, use overall average
        const allDurations = dayData.flat();
        if (allDurations.length > 0) {
          const overallAvg = Math.round(allDurations.reduce((a, b) => a + b, 0) / allDurations.length);
          return overallAvg;
        }
        return 0;
      }
      const sum = dayDurations.reduce((a, b) => a + b, 0);
      return Math.round(sum / dayDurations.length);
    });

    console.log('Duration by day result:', result);
    return result;
  }

  /**
   * Load mock data for development/fallback
   */
  loadMockData() {
    this.data = {
      totalCalls: 1247,
      callsAnswered: 892,
      leadsQualified: 156,
      humanInterventions: 23,
      lastUpdated: new Date()
    };
    console.log('Loaded mock data for dashboard');
  }

  /**
   * Update summary cards with current data
   */
  updateSummaryCards() {
    console.log('Updating summary cards with data:', this.data);
    
    // Update Total Calls
    const totalCallsElement = document.querySelector('.card.summary:nth-child(1) .value');
    console.log('Total calls element:', totalCallsElement);
    if (totalCallsElement) {
      totalCallsElement.textContent = this.data.totalCalls.toLocaleString();
    }

    // Update Calls Answered
    const callsAnsweredElement = document.querySelector('.card.summary:nth-child(2) .value');
    if (callsAnsweredElement) {
      const answerRate = this.data.totalCalls > 0 ? 
        ((this.data.callsAnswered / this.data.totalCalls) * 100).toFixed(1) : 0;
      callsAnsweredElement.textContent = `${this.data.callsAnswered.toLocaleString()} (${answerRate}%)`;
    }

    // Update Leads Qualified
    const leadsQualifiedElement = document.querySelector('.card.summary:nth-child(3) .value');
    if (leadsQualifiedElement) {
      const qualificationRate = this.data.callsAnswered > 0 ? 
        ((this.data.leadsQualified / this.data.callsAnswered) * 100).toFixed(1) : 0;
      leadsQualifiedElement.textContent = `${this.data.leadsQualified.toLocaleString()} (${qualificationRate}%)`;
    }

    // Update Human Interventions
    const humanInterventionsElement = document.querySelector('.card.summary:nth-child(4) .value');
    if (humanInterventionsElement) {
      humanInterventionsElement.textContent = this.data.humanInterventions.toLocaleString();
    }
  }

  /**
   * Initialize all charts
   */
  initializeCharts() {
    console.log('Starting chart initialization...');
    
    try {
      this.initializeFunnelChart();
      console.log('Funnel chart initialized');
      
      this.initializeQualificationGauge();
      console.log('Gauge chart initialization attempted');
      
      this.initializeCallDurationChart();
      console.log('Duration chart initialized');
      
      this.initializeHeatMapChart();
      console.log('Heat map chart initialized');
      
      this.initializeSourcePerformanceChart();
      console.log('Source performance chart initialized');
      
      console.log('All charts initialized successfully');
    } catch (error) {
      console.error('Error initializing charts:', error);
    }
  }

  /**
   * Initialize the funnel chart
   */
  initializeFunnelChart() {
    const ctx = document.getElementById('funnelChart');
    if (!ctx) return;

    const unqualified = this.data.callsAnswered - this.data.leadsQualified;
    
    this.charts.funnel = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Contacted', 'Answered', 'Qualified', 'Unqualified'],
        datasets: [{
          label: 'Leads',
          data: [this.data.totalCalls, this.data.callsAnswered, this.data.leadsQualified, unqualified],
          backgroundColor: ['#3498db', '#2ecc71', '#2ecc71', '#e74c3c']
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: function(context) {
                return context.dataset.label + ': ' + context.parsed.y.toLocaleString();
              }
            }
          }
        },
        scales: {
          y: { 
            beginAtZero: true, 
            ticks: { 
              color: '#34495e',
              callback: function(value) {
                return value.toLocaleString();
              }
            }
          },
          x: { ticks: { color: '#34495e' } }
        }
      }
    });
  }

  /**
   * Initialize the qualification rate gauge
   */
  initializeQualificationGauge() {
    console.log('Attempting to initialize qualification gauge...');
    
    const ctx = document.getElementById('qualRateGauge');
    console.log('Canvas element found:', ctx);
    
    if (!ctx) {
      console.error('Gauge canvas element not found!');
      return;
    }

    const qualificationRate = this.data.callsAnswered > 0 ? 
      ((this.data.leadsQualified / this.data.callsAnswered) * 100) : 0;

    console.log('Gauge data:', {
      callsAnswered: this.data.callsAnswered,
      leadsQualified: this.data.leadsQualified,
      qualificationRate: qualificationRate
    });

    try {
      // Create a simple doughnut chart
      this.charts.gauge = new Chart(ctx, {
        type: 'doughnut',
        data: {
          datasets: [{
            data: [qualificationRate, 100 - qualificationRate],
            backgroundColor: ['#2ecc71', '#ecf0f1'],
            borderWidth: 0
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          rotation: -90 * Math.PI / 180,
          circumference: 180 * Math.PI / 180,
          cutout: '70%',
          plugins: {
            tooltip: { enabled: false },
            legend: { display: false }
          }
        },
        plugins: [{
          id: 'centerText',
          beforeDraw: function(chart) {
            const { width, height, ctx } = chart;
            ctx.restore();
            
            const fontSize = Math.min(width, height) / 8;
            ctx.font = `bold ${fontSize}px Arial`;
            ctx.fillStyle = '#2c3e50';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            const text = qualificationRate.toFixed(1) + '%';
            const textX = width / 2;
            const textY = height / 1.4;
            
            ctx.fillText(text, textX, textY);
            ctx.save();
          }
        }]
      });
      
      console.log('Gauge chart created successfully with rate:', qualificationRate + '%');
    } catch (error) {
      console.error('Error creating gauge chart:', error);
    }
  }

  /**
   * Initialize call duration chart
   */
  initializeCallDurationChart() {
    const ctx = document.getElementById('timeToQualifyChart');
    if (!ctx) return;

    // Calculate average duration by day of week from real data
    const durationData = this.calculateDurationByDay();

    this.charts.duration = new Chart(ctx, {
      type: 'line',
      data: {
        labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        datasets: [{
          label: 'Median Time (min)',
          data: durationData,
          borderColor: '#e67e22',
          backgroundColor: 'rgba(230, 126, 34, 0.1)',
          fill: false,
          tension: 0.3
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: { 
          legend: { position: 'bottom' }
        },
        scales: {
          y: { 
            beginAtZero: true, 
            ticks: { color: '#34495e' }
          },
          x: { ticks: { color: '#34495e' } }
        }
      }
    });
  }

  /**
   * Initialize heat map chart for best call times
   */
  initializeHeatMapChart() {
    const ctx = document.getElementById('heatMapChart');
    if (!ctx) return;

    this.charts.heatMap = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['9 AM', '10 AM', '11 AM', '12 PM', '1 PM', '2 PM', '3 PM', '4 PM', '5 PM'],
        datasets: [{
          label: 'Answer Rate',
          data: [65, 72, 85, 78, 45, 68, 82, 75, 58],
          backgroundColor: [
            '#e74c3c', '#f39c12', '#2ecc71', '#f39c12', '#e74c3c',
            '#f39c12', '#2ecc71', '#f39c12', '#e74c3c'
          ],
          borderRadius: 4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: function(context) {
                return 'Answer Rate: ' + context.parsed.y + '%';
              }
            }
          }
        },
        scales: {
          x: {
            title: { display: true, text: 'Time of Day', color: '#2c3e50' },
            ticks: { color: '#34495e' }
          },
          y: {
            title: { display: true, text: 'Answer Rate (%)', color: '#2c3e50' },
            beginAtZero: true,
            max: 100,
            ticks: {
              color: '#34495e',
              callback: function(value) {
                return value + '%';
              }
            }
          }
        }
      }
    });
  }

  /**
   * Initialize source performance chart
   */
  initializeSourcePerformanceChart() {
    const ctx = document.getElementById('sourcePerformanceChart');
    if (!ctx) return;

    this.charts.sourcePerformance = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Website', 'Ads', 'Referrals'],
        datasets: [
          { 
            label: 'Qualified', 
            data: [80, 45, 60], 
            backgroundColor: '#2ecc71' 
          },
          { 
            label: 'Unqualified', 
            data: [320, 255, 140], 
            backgroundColor: '#e74c3c' 
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: { 
          legend: { position: 'bottom' }
        },
        scales: {
          x: { 
            stacked: true, 
            ticks: { color: '#34495e' } 
          },
          y: { 
            stacked: true, 
            beginAtZero: true, 
            ticks: { color: '#34495e' }
          }
        }
      }
    });
  }

  /**
   * Update timestamp
   */
  updateTimestamp() {
    const timestampElement = document.getElementById('timestamp');
    if (timestampElement) {
      timestampElement.textContent = new Date().toLocaleString();
    }
  }

  /**
   * Start auto-refresh interval
   */
  startAutoRefresh() {
    setInterval(async () => {
      try {
        await this.refreshData();
        console.log('Dashboard data refreshed');
      } catch (error) {
        console.error('Failed to refresh dashboard data:', error);
      }
    }, this.refreshInterval);
  }

  /**
   * Refresh dashboard data
   */
  async refreshData() {
    await this.loadInitialData();
    this.updateCharts();
    this.updateTimestamp();
  }

  /**
   * Update all charts with new data
   */
  updateCharts() {
    // Update funnel chart
    if (this.charts.funnel) {
      const unqualified = this.data.callsAnswered - this.data.leadsQualified;
      this.charts.funnel.data.datasets[0].data = [
        this.data.totalCalls, 
        this.data.callsAnswered, 
        this.data.leadsQualified, 
        unqualified
      ];
      this.charts.funnel.update();
    }

    // Update qualification gauge
    if (this.charts.gauge) {
      const qualificationRate = this.data.callsAnswered > 0 ? 
        ((this.data.leadsQualified / this.data.callsAnswered) * 100) : 0;
      this.charts.gauge.data.datasets[0].data = [qualificationRate, 100 - qualificationRate];
      this.charts.gauge.update();
    }

    // Update duration chart
    if (this.charts.duration) {
      const durationData = this.calculateDurationByDay();
      this.charts.duration.data.datasets[0].data = durationData;
      this.charts.duration.update();
    }
  }

  /**
   * Get current dashboard metrics
   */
  getMetrics() {
    return {
      ...this.data,
      answerRate: this.data.totalCalls > 0 ? 
        ((this.data.callsAnswered / this.data.totalCalls) * 100).toFixed(1) : 0,
      qualificationRate: this.data.callsAnswered > 0 ? 
        ((this.data.leadsQualified / this.data.callsAnswered) * 100).toFixed(1) : 0
    };
  }
}

// Initialize dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  window.dashboardManager = new DashboardManager();
});

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = DashboardManager;
}
